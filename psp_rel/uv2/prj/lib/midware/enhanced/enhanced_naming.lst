C251 COMPILER V4.55,  enhanced_naming                                                      13/09/11  15:43:31  PAGE 1   


C251 COMPILER V4.55, COMPILATION OF MODULE enhanced_naming
OBJECT MODULE PLACED IN ..\..\..\..\obj\lib\enhanced\enhanced_naming.obj
COMPILER INVOKED BY: D:\Keil\C251\BIN\C251.EXE ..\..\..\..\..\libsrc\midware\enhanced\getNewName\enhanced_naming.c XSMAL
                    -L INTR2 FUNCTIONS(REENTRANT) ROM(HUGE) OPTIMIZE(9,SPEED) INCDIR(..\..\..\..\..\inc) DEBUG PRINT(.\enhanced_naming.lst) O
                    -BJECT(..\..\..\..\obj\lib\enhanced\enhanced_naming.obj) 

stmt  level    source

    1          /*
    2           *******************************************************************************
    3           *                ACTOS AP
    4           *        enhanced module impletementation
    5           *
    6           *        (c) Copyright, Actions Co,Ld.
    7           *             All Right Reserved
    8           *
    9           *******************************************************************************
   10           */
   11          #pragma name(MW_EH_NAME)
   12          #pragma renamecode(MW_EH_NAME)
   13          
   14          #include <actos.h>
   15          #include <enhanced.h>
   16          #include <stringH.h>
   17          //#include <debug.h>
   18          
   19          
   20          /*
   21           ********************************************************************************
   22           * Description : 数字转换成字符串
   23           *
   24           * Arguments   : i, 数字
   25           *               buf, 输出字符串指针
   26           *
   27           * Returns     : 成功, 输出字符串指针
   28           *
   29           * Notes       : 数字只能是 01~99, 没有0结尾
   30           *
   31           ********************************************************************************
   32           */
   33          char *my_itoa(int i, uint8 *buf)
   34          {
   35   1          buf[0] = ((i / 1000) % 10) + '0';
   36   1          buf[1] = ((i / 100) % 10) + '0';
   37   1          buf[2] = ((i / 10) % 10) + '0';
   38   1          buf[3] = (i % 10) + '0';
   39   1          return buf;
   40   1      }
   41          /*
   42           ********************************************************************************
   43           * Description : 根据序号生成新的可用文件名
   44           *
   45           * Arguments   : location->filename, 原来的文件名
   46           *               location->filename, 输出新的文件名
   47           *
   48           * Returns     :  新文件的序号, 01~99
   49           *        如果01~99 文件存在, 返回0
   50           *
   51           * Notes       :文件名字格式 : xxx000 WAV, xxx000 ACT, ***000 JPG...
   52           *        如果输入的文件不存在,则直接返回
   53           检查目录满最长时间15s
   54           顺序产生下一个目录名最长时间1s.
   55           *
   56           * TODO:        不要使用 atoi(), 节省128byte  (ok!)
   57           ********************************************************************************
C251 COMPILER V4.55,  enhanced_naming                                                      13/09/11  15:43:31  PAGE 2   

   58           */
   59          #ifndef PC
   60          int sGenNewName(file_location_t *location)
   61          #else
               int GenNewName(file_location_t *location)
               #endif
   64          //int sGenNewName(file_location_t *location)
   65          {
   66   1          int num;
   67   1          int loops = 0;
   68   1          uint8 new_name[12];
   69   1          handle f;
   70   1      
   71   1          //ASSERT(location->filename[3] >= '0' && location->filename[3] <= '9');
   72   1          //ASSERT(location->filename[4] >= '0' && location->filename[4] <= '9');
   73   1          //ASSERT(location->filename[5] >= '0' && location->filename[5] <= '9');
   74   1      
   75   1          //复制到new_name
   76   1          memcpy(new_name, location->filename, 12);
   77   1      
   78   1          // 检查文件夹是否含有001这个文件,如没有RETURN 1
   79   1          /*
   80   1          new_name[3] = '0';
   81   1          new_name[4] = '0';
   82   1          new_name[5] = '1';
   83   1          */
   84   1          new_name[4] = '0';
   85   1          new_name[5] = '0';
   86   1          new_name[6] = '0';
   87   1          new_name[7] = '1';
   88   1          // 如果文件不存在
   89   1          f = FS_FOpen(new_name, 0);
   90   1          if (f == NULL)
   91   1          {
   92   2              memcpy(location->filename, new_name, 11);
   93   2              location->filename[11] = 0;
   94   2              // 删除文件长度为0的文件.
   95   2              //文件名已经存在，但文件长度为0时open也失败。
   96   2              FS_FRemove(location->filename);
   97   2              return 1;
   98   2          }
   99   1          else
  100   1          {
  101   2              FS_FClose(f);
  102   2          }
  103   1      
  104   1          // 按指定的值,继续查找.
  105   1          memcpy(new_name, location->filename, 12);
  106   1          //num = (new_name[3] - '0') * 100 + (new_name[4] - '0') * 10 + (new_name[5] - '0');
  107   1              //num = (new_name[5] - '0') * 100 + (new_name[6] - '0') * 10 + (new_name[7] - '0');
  108   1              num = (new_name[4] - '0') * 1000 + (new_name[5] - '0') * 100 + (new_name[6] - '0') * 10 + (new_name[7] -
             - '0');
  109   1          //    if(num <= 0) num = 1;
  110   1          //    if(num > 200) num = 1;
  111   1          //  my_itoa(num, &new_name[3]);
  112   1          if ((num <= 0) || (num >= 10000))   //200
  113   1          {
  114   2              num = 1;
  115   2             // my_itoa(num, &new_name[3]);
  116   2             my_itoa(num, &new_name[4]);
  117   2          }
  118   1      
  119   1          //如果文件存在,数字加1
  120   1          do
  121   1          {
  122   2              // 如果文件不存在
C251 COMPILER V4.55,  enhanced_naming                                                      13/09/11  15:43:31  PAGE 3   

  123   2              ClearWatchDog();
  124   2              f = FS_FOpen(new_name, 0);
  125   2              if (f == NULL)
  126   2              {
  127   3                  memcpy(location->filename, new_name, 11);
  128   3                  location->filename[11] = 0;
  129   3                  FS_FRemove(location->filename);
  130   3                  return num;
  131   3              }
  132   2              else
  133   2              {
  134   3                  FS_FClose(f);
  135   3                  num++;
  136   3                  if (num >= 10000)   //200
  137   3                  {
  138   4                      num = 1;
  139   4                  }
  140   3                  //my_itoa(num, &new_name[3]);
  141   3                  my_itoa(num, &new_name[4]);
  142   3              }
  143   2              loops++;
  144   2          } while (loops < 10000);    //200
  145   1      
  146   1          return 0;
  147   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =    ------     ------
  ecode size           =       528     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
